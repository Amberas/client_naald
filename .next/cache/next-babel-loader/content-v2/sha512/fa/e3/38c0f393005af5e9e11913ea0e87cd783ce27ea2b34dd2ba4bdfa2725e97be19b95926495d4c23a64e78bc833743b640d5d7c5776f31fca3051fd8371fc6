{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/amberaspeslagh/Creative Cloud Files/devine/vakken/development 4/next/06-next-deploy-revalidate/client/pages/articles/[slug].js\";\nimport Layout from '../../components/Layout';\nimport Head from 'next/head';\nimport Link from 'next/link';\nexport async function getStaticPaths() {\n  // Call an external API endpoint to get posts\n  const res = await fetch(`${process.env.STRAPI_API}/articles/`);\n  const articles = await res.json(); // Get the paths we want to pre-render based on posts\n\n  const paths = articles.map(article => ({\n    params: {\n      slug: `${article.slug}`\n    }\n  })); // We'll pre-render only these paths at build time.\n  // { fallback: false } means other routes should 404.\n\n  return {\n    paths,\n    fallback: false\n  };\n} // This also gets called at build time\n\nexport async function getStaticProps({\n  params\n}) {\n  // params contains the post `id`.\n  // If the route is like /posts/1, then params.id is 1\n  const res = await fetch(`${process.env.STRAPI_API} /articles/${params.slug}/`);\n  const article = await res.json(); // Pass post data to the page via props\n\n  return {\n    props: {\n      article\n    }\n  };\n}\nexport default function articleDetail({\n  article\n}) {\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Layout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Head, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Article\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: article.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: article.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["/Users/amberaspeslagh/Creative Cloud Files/devine/vakken/development 4/next/06-next-deploy-revalidate/client/pages/articles/[slug].js"],"names":["Layout","Head","Link","getStaticPaths","res","fetch","process","env","STRAPI_API","articles","json","paths","map","article","params","slug","fallback","getStaticProps","props","articleDetail","title","content"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAGA,OAAO,eAAeC,cAAf,GAAgC;AACnC;AACA,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,UAAW,YAA3B,CAAvB;AACA,QAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAvB,CAHmC,CAKnC;;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAACG,GAAT,CAAcC,OAAD,KAAc;AACrCC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,IAAI,EAAG,GAAEF,OAAO,CAACE,IAAK;AAAxB;AAD6B,GAAd,CAAb,CAAd,CANmC,CAUnC;AACA;;AACA,SAAO;AAAEJ,IAAAA,KAAF;AAASK,IAAAA,QAAQ,EAAE;AAAnB,GAAP;AACH,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8B;AAAEH,EAAAA;AAAF,CAA9B,EAA0C;AAC7C;AACA;AACA,QAAMV,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAY,cAAaM,MAAM,CAACC,IAAK,GAAtD,CAAvB;AACA,QAAMF,OAAO,GAAG,MAAMT,GAAG,CAACM,IAAJ,EAAtB,CAJ6C,CAM7C;;AACA,SAAO;AAAEQ,IAAAA,KAAK,EAAE;AAAEL,MAAAA;AAAF;AAAT,GAAP;AACH;AAED,eAAe,SAASM,aAAT,CAAuB;AAAEN,EAAAA;AAAF,CAAvB,EAAoC;AAE/C,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAFJ,eAKI;AAAA,gBAAKA,OAAO,CAACO;AAAb;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAA,gBAAIP,OAAO,CAACQ;AAAZ;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH","sourcesContent":["import Layout from '../../components/Layout'\nimport Head from 'next/head'\nimport Link from 'next/link'\n\n\nexport async function getStaticPaths() {\n    // Call an external API endpoint to get posts\n    const res = await fetch(`${process.env.STRAPI_API}/articles/`)\n    const articles = await res.json()\n\n    // Get the paths we want to pre-render based on posts\n    const paths = articles.map((article) => ({\n        params: { slug: `${article.slug}` },\n    }))\n\n    // We'll pre-render only these paths at build time.\n    // { fallback: false } means other routes should 404.\n    return { paths, fallback: false }\n}\n\n// This also gets called at build time\nexport async function getStaticProps({ params }) {\n    // params contains the post `id`.\n    // If the route is like /posts/1, then params.id is 1\n    const res = await fetch(`${ process.env.STRAPI_API } /articles/${params.slug}/`)\n    const article = await res.json()\n\n    // Pass post data to the page via props\n    return { props: { article } }\n}\n\nexport default function articleDetail({ article }) {\n\n    return (\n        <main>\n            <Layout />\n            <Head>\n                <title>Article</title>\n            </Head>\n            <h2>{article.title}</h2>\n            <p>{article.content}</p>\n        </main>\n    );\n}"]},"metadata":{},"sourceType":"module"}